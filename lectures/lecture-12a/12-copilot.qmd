---
title: QTM 350 - Data Science Computing
subtitle: "Lecture 13 - AI-Assisted Programming with GitHub Copilot (and More)"
author:
  - name: Danilo Freire
    email: danilo.freire@emory.edu
    affiliations: Emory University
format:
  clean-revealjs:
    self-contained: true
    footer: "[Copilot CLI and More](https://raw.githack.com/danilofreire/qtm350/main/lectures/lecture-13/13-copilot.html)"
transition: slide
transition-speed: default
scrollable: true
engine: jupyter
revealjs-plugins:
  - fontawesome
editor:
  render-on-save: true
---

# Hello, everyone! <br> Hope all is well! üòä {background-color="#2d4563"}

# Lecture overview üìö {background-color="#2d4563"}

## In this lecture, we will:

:::{style="margin-top: 40px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
- Discuss the pros and cons of AI-assisted programming with GitHub Copilot
- Learn how to install Copilot in the command line
- Show some useful features of Copilot, including:
  - Code generation
  - Code explanations
  - Use of `@` extensions for specific tasks (new feature!)
  - Optimisation or simplification of code
  - Run tests and examples
  - Learn how to use agent mode to automate tasks
:::

:::{.column width="50%"}
:::{style="text-align: center; margin-top: -110px;"}
![](figures/copilot-features.png)
:::
:::
:::
:::

# Installing GitHub Copilot in the command line üñ•Ô∏è {background-color="#2d4563"}

## Step 1: Install GitHub CLI

:::{style="margin-top: 40px; font-size: 21px;"}
:::{.columns}
:::{.column width="50%"}
- To use GitHub Copilot in the CLI, you need:
  - An active GitHub Copilot subscription
  - GitHub CLI installed
  - The Copilot CLI extension

- MacOS and Linux users can install [GitHub CLI](https://cli.github.com/) with [Homebrew](https://brew.sh/):

```{verbatim}
brew install gh
```

- Windows users can install GitHub CLI with [Chocolatey](https://chocolatey.org/):

```{verbatim}
choco install gh
```

- Or download the [GitHub CLI installer](https://cli.github.com/)

- To install the extension, run:

```{verbatim}
gh extension install github/copilot-cli
```
:::

:::{.column width="50%"}
:::{style="text-align: center;"}
![](figures/gh-cli.png)

<https://cli.github.com/>
:::
:::
:::
:::

## Step 2: Authenticate with GitHub

:::{style="margin-top: 40px; font-size: 23px;"}
- To authenticate with GitHub, run:

```{verbatim}
gh auth login
```

- Follow the instructions to authenticate with GitHub. Select `GitHub.com`

```{verbatim}
‚ùØ gh auth login
? Where do you use GitHub?  [Use arrows to move, type to filter]
> GitHub.com
  Other
```

- You will be asked to open a browser and authenticate with GitHub. Select `HTTPS`

```{verbatim}
‚ùØ gh auth login
? Where do you use GitHub? GitHub.com
? What is your preferred protocol for Git operations on this host?  [Use arrows to move, type to filter]
> HTTPS
  SSH
```
:::

## Step 2: Authenticate with GitHub

:::{style="margin-top: 40px; font-size: 23px;"}

```{verbatim}
? Authenticate Git with your GitHub credentials? (Y/n) Y
```

- You will be asked to login

```{verbatim}
? How would you like to authenticate GitHub CLI?  [Use arrows to move, type to filter]
> Login with a web browser
  Paste an authentication token
```

- Copy the code and press `Enter` to go to the browser. Press `Continue`, paste the code, and click on `Authorize`

```{verbatim}
! First copy your one-time code: 1111-AAAA
Press Enter to open github.com in your browser... 
```

- If successful, you will see:

```{verbatim}
‚úì Authentication complete.
- gh config set -h github.com git_protocol https
‚úì Configured git protocol
‚úì Logged in as danilofreire
```

- And you're done! üéâ
:::

## Step 3: Use Copilot in the CLI

:::{style="margin-top: 40px; font-size: 23px;"}
- Now that you have `gh` installed, you can use Copilot in the CLI
- [To install Copilot](https://docs.github.com/en/copilot/managing-copilot/configure-personal-settings/installing-github-copilot-in-the-cli), run:

```{verbatim}
gh extension install github/gh-copilot
```

- And you should be ready to go! üöÄ
- GitHub Copilot in the CLI offers two primary commands
  - [Explain Command]{.alert}: Use `gh copilot explain` followed by a command to get an explanation
  - [Suggest Command]{.alert}: Use `gh copilot suggest` followed by a prompt to generate code
:::

## Step 3: Use Copilot in the CLI

:::{style="margin-top: 40px; font-size: 23px;"}
- You can also create [aliases]{.alert} for these commands. For example:
  - `ghce` for `gh copilot explain`
  - `ghcs` for `gh copilot suggest`

- If you use `zsh`, you can just copy the commands below in your terminal:

```{verbatim}
echo 'eval "$(gh copilot alias -- zsh)"' >> ~/.zshrc && source ~/.zshrc
```

- Or if you use `bash`:

```{verbatim}
echo 'eval "$(gh copilot alias -- bash)"' >> ~/.bashrc && source ~/.bashrc
```

- Windows PowerShell users can use:

```{verbatim}
$GH_COPILOT_PROFILE = Join-Path -Path $(Split-Path -Path $PROFILE -Parent) -ChildPath "gh-copilot.ps1"
gh copilot alias -- pwsh | Out-File ( New-Item -Path $GH_COPILOT_PROFILE -Force )
echo ". `"$GH_COPILOT_PROFILE`"" >> $PROFILE
```

- Let's see some examples!
:::

# Copilot in action! üöÄ {background-color="#2d4563"}

## Example 01: Stop struggling with terminal commands üñ•Ô∏è

:::{style="margin-top: 40px; font-size: 21px;"}
- Let's start with `gh copilot explain` to get an explanation of a command
- The command below searches for log files and then searches within them for the word `error`
  - `find / -name '*.log' -exec grep 'error' {} +`

:::{style="text-align: center;"}
![](figures/ghce01.png)
:::
:::

## Example 01: Stop struggling with terminal commands üñ•Ô∏è

:::{style="margin-top: 40px; font-size: 21px;"}
- Now let's use `gh copilot suggest` to generate a command
- `ghcs "create three txt files with names test1.txt, test2.txt, and test3.txt", then add the content "Hello, world!" to each file, then list the files, show the content of each file, and delete them"`

:::{style="text-align: center;"}
![](figures/ghcs01.png){width="80%"}
:::
:::

## Example 01: Stop struggling with terminal commands üñ•Ô∏è

:::{style="margin-top: 40px; font-size: 21px; text-align: center;"}
![](figures/ghcs02.png){width="100%"}
:::

## Example 02: Stop struggling with Git üêô

:::{style="margin-top: 40px; font-size: 21px;"}
- Let's see how Copilot can help with Git commands
- `ghcs "create a new branch called 'feature-branch', switch to it, create a new file called 'feature.txt', add some content to it, commit the changes, push the branch to the remote repository, and open a pull request"`

:::{style="text-align: center;"}
![](figures/ghcs03.png){width="80%"}
:::
:::

## Example 03: Stop struggling with GitHub CLI üêô

:::{style="margin-top: 40px; font-size: 21px;"}
- `ghcs "how can I use gh to create a new private repository on GitHub danilofreire/testing, clone it to my computer, add a README file, commit the changes, push the changes to the remote repository, and open a pull request?"`

:::{style="text-align: center;"}
![](figures/ghcs04.png){width="80%"}
:::
:::

# Cool, isn't it? ü§© {background-color="#2d4563"}

## Let's see what Copilot can do for you in VS Code

:::{style="margin-top: 40px; font-size: 21px;"}
- If you have installed Copilot in VS Code, just click on the Copilot icon (a chat bubble) in the bottom left corner
- You can then type a prompt and see the suggestions. As you know how to ask it to generate code (same as in ChatGPT), let's see other things that Copilot can do for you
- Type `/help` to see the available commands
- You will also note that there are commands such as `@workspace`, `@vscode`, `@terminal`, and `@github` that allow you to interact with the workspace, VS Code, the terminal, and GitHub (including your account), respectively
- You can also interact with files with `#file`
- Let's have a look at some examples
:::

## Example 04: Explain code ü§î

:::{style="margin-top: 40px; font-size: 21px;"}
- Type `/explain` followed by a code snippet to get an explanation. You can select the snippet directly in the terminal, then just type `/explain`

:::{style="text-align: center;"}
![](figures/copilot-explain.png){width="80%"}
:::
:::

## Example 05: Run tests üß™

:::{style="margin-top: 40px; font-size: 21px;"}
- Type `/tests` followed by a code snippet to run tests
- Let's see how it tests this function:

```{python}
#| echo: true
#| eval: false
class SimpleCalculator:
    def add(self, a, b):
        return a + b

    def subtract(self, a, b):
        return a - b

    def multiply(self, a, b):
        return a * b

    def divide(self, a, b):
        if b == 0:
            raise ValueError("Cannot divide by zero")
        return a / b

    def square_root(self, a):
        if a < 0:
            raise ValueError("Cannot calculate square root of a negative number")
        return a ** 0.5

```
:::

## Example 05: Run tests üß™

:::{style="margin-top: 40px; font-size: 21px; text-align: center;"}
![](figures/copilot-tests.png){width="80%"}
:::

## Example 06: Fix code üõ†Ô∏è

:::{style="margin-top: 40px; font-size: 21px;"}
- Type `/fix` followed by a code snippet to fix it
- This function is supposed to check if a number is even, but it has a logical error. The division operation `(number / 2)` should be replaced with the modulo operation `(number % 2)`
- If you hoover over the `Fixed Code` block, you will see the options: 
  - Apply the fix in the editor
  - Insert the fixed code at the cursor
  - Copy the fixed code to the clipboard
  - Insert into a terminal
  - Insert into a new file

```{python}
#| echo: true
#| eval: false
def is_even(number):
    return number / 2 == 0
```
:::

## Example 06: Fix code üõ†

:::{style="margin-top: 40px; font-size: 21px; text-align: center;"}
![](figures/copilot-fix.png){width="80%"}
:::

## Example 07: Create new file and generate text/code üöÄ

:::{style="margin-top: 40px; font-size: 21px;"}
- Type `/new` and pass the information about the file you want to create
- `/new create a file.txt file with the first three lines of Homer's Odyssey`

:::{style="text-align: center;"}
![](figures/copilot-new.png){width="90%"}
:::
:::

## Example 08: Run code üèÉ‚Äç‚ôÇÔ∏è

:::{style="margin-top: 40px; font-size: 21px;"}
- You can use the `@terminal` command to write and run code in the terminal. Click on the terminal icon to insert the code
- `@terminal create a file titled test.py and add print("Hello, world!") using the command line`

:::{style="text-align: center;"}
![](figures/copilot-terminal.png){width="90%"}
:::
:::

## Example 09: Interact with GitHub üêô

:::{style="margin-top: 40px; font-size: 21px;"}
- You can use the `@github` command to interact with GitHub
- For example, let's see what are the latest 3 commits of this repository (`danilofreire/qtm350`)
- You can also use `@github` to create a new repository, open a pull request, and more

:::{style="text-align: center;"}
![](figures/copilot-github.png){width="90%"}
:::
:::

## Example 10: Interact with VS Code üöÄ

:::{style="margin-top: 40px; font-size: 21px;"}
- You can use the `@vscode` command to interact with VS Code
- For example, let's see how to open a new file in the editor

:::{style="text-align: center;"}
![](figures/copilot-vscode.png){width="90%"}
:::
:::

## Example 11: Interact with the workspace üíª

:::{style="margin-top: 40px; font-size: 21px;"}
- The `@workspace` command allows you to interact with the workspace, which are the files and folders you have open in VS Code
- For example, let's ask it to list the files in the workspace

:::{style="text-align: center;"}
![](figures/copilot-workspace.png){width="90%"}
:::
:::

## Example 11: Interact with the workspace üíª

:::{style="margin-top: 40px; font-size: 21px;"}
- Another example: let's ask it to find files that contains bash commands
- Click on the icons and they will open!

:::{style="text-align: center;"}
![](figures/copilot-workspace02.png){width="90%"}
:::
:::

## Last Example: Searching for text in files üìÑ

:::{style="margin-top: 40px; font-size: 21px;"}
- You can use the `#file` command to search for text in files
- Combine it with the `@workspace` command to search in all files in the workspace
- Let's search for Python code in this file

:::{style="text-align: center;"}
![](figures/copilot-file.png){width="90%"}
:::
:::

## Summary

:::{style="margin-top: 40px; font-size: 22px;"}
:::{.columns}
:::{.column width="50%"}
- GitHub Copilot can save you a lot of time and make you more productive (and it's fun!)
- It is not perfect, but it is a good tool as it is ü§ì
- You should also have a look at other AI coding tools, and I recommend you to try [Cline](https://marketplace.visualstudio.com/items?itemName=saoudrizwan.claude-dev) and [DeepSeek](https://deepseek.com), as they work really well and can do much more than just code generation
- Also, please read more about [AI agents](https://www.ibm.com/think/topics/ai-agents) and how [they can be used in your projects](https://blog.langchain.dev/what-is-an-agent/)
- I hope you will make good use of AI coding tools from now on ü§ñ
- Find out other uses for it, test the other tools available, and let me know what you think!
:::

:::{.column width="50%"}
:::{style="text-align: center; margin-top: -50px;"}
![](figures/ai-tools.png)
:::
:::
:::
:::

# And that's it for today! üéâ {background-color="#2d4563"}

# Thank you for your attention and see you all soon! {background-color="#2d4563"}
