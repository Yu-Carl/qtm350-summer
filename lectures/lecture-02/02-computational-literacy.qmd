---
title: QTM 350 - Data Science Computing
subtitle: Lecture 02 - Computational Literacy
author:
  - name: Danilo Freire
    email: danilo.freire@emory.edu
    affiliations: Department of Quantitative Theory and Methods <br> Emory University
format:
  clean-revealjs:
    self-contained: true
    footer: "[Comp. Literacy](https://raw.githack.com/danilofreire/qtm350-summer/main/lectures/lecture-02/02-computational-literacy.html)"
transition: slide
transition-speed: default
scrollable: true
engine: knitr
editor:
  render-on-save: true
---

```{r setup, include=FALSE}
# figures formatting setup
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
  prompt = T,
  fig.align="center", #fig.width=6, fig.height=4.5, 
  # out.width="748px", #out.length="520.75px",
  dpi=300, #fig.path='Figs/',
  cache=T, #echo=F, warning=F, message=F
  engine.opts = list(bash = "-l")
  )

## Next hook based on this SO answer: [https://stackoverflow.com/a/39025054](https://stackoverflow.com/a/39025054)
knit_hooks$set(
  prompt = function(before, options, envir) {
    options(
      prompt = if (options$engine %in% c('sh','bash', 'zsh')) '$ ' else 'R> ',
      continue = if (options$engine %in% c('sh','bash', 'zsh')) '$ ' else '+ '
      )
})

packages <- c("tidyverse", "emo", "fontawesome")

for (package in packages) {
  if (!require(package, character.only = TRUE)) {
    install.packages(package, dependencies = TRUE)
    library(package, character.only = TRUE)
  }
}
```

## Learning objectives
### By the end of this lecture, you will be able to:

:::{style="margin-top:40px;"}
:::

1. Understand the historical evolution of computers, from manual calculation to modern electronics
2. Grasp the fundamental architecture of computers (Von Neumann)
3. Explain how computers represent various forms of data (numbers, images, colours) using binary and hexadecimal systems
4. Perform basic conversions between decimal, binary, and hexadecimal numbers
5. Appreciate the role of abstraction in computing

# Let's get started! `r emo::ji('rocket')` `r emo::ji('computer')` {background-color="#2d4563"}

# Brief history of computing {background-color="#2d4563"}

## The first computers

:::{style="margin-top:40px;"}
:::

::::: {.columns}
:::: {.column width="50%"}
- Historically, [a computer was a person who makes calculations]{.alert}, especially with a calculating machine
- To do calculations we use numbers. How to represent them?
  - Fingers 
  - Pebbles
  - [Strings (Inca Khipu)](https://www.ecb.torontomu.ca/~elf/abacus/inca-khipu.html)
  - [Abacus](https://en.wikipedia.org/wiki/Abacus)
::::

:::: {.column width="50%"}
:::{style="font-size: 20px;"}
![](figures/abacus.jpg)
Video: [How to use an abacus](https://youtu.be/SkUdjlQy3rk&t=176)
:::
::::
:::::

## Four-species mechanical calculators

:::{style="margin-top:40px;"}
:::

:::: {.columns}
::: {.column width="50%"}
![](figures/mechanical-calculator.jpg)
:::

::: {.column width="50%"}
- The [first mechanical calculator](https://www.arithmeum.uni-bonn.de/en/collection/exhibit-of-the-month/archive/01-the-first-mechanical-calculating-machine-for-all-four-arithmetic-operations-by-gottfried-wilhelm-leibniz.html) capable of performing all four basic arithmetic operations (addition, subtraction, multiplication, and division)

- Invented by [Gottfried Wilhelm Leibniz](https://en.wikipedia.org/wiki/Gottfried_Wilhelm_Leibniz) in 1694

- If you took a statistics course before the late 1970s, you likely used this type of [mechanical calculator](https://en.wikipedia.org/wiki/Mechanical_calculator) for your computations
:::
::::

## Silicon-based computers

:::{style="margin-top:40px;"}
:::

:::: {.columns}
::: {.column width="50%"}
![](figures/transistor.gif)
:::

::: {.column width="50%"}
:::{style="font-size: 26px;"}
The 1970s marked the transition from mechanical to electronic:

:::{.incremental}
- [Transistors](https://en.wikipedia.org/wiki/Transistor) act as switches for electronic signals
- [Integrated circuits](https://en.wikipedia.org/wiki/Integrated_circuit) combine multiple transistors on a single chip
- [Microprocessors](https://en.wikipedia.org/wiki/Microprocessor) are integrated circuits that contain the functions of a computer's central processing unit (CPU)
- They follow the [Von Neumann architecture](https://en.wikipedia.org/wiki/Von_Neumann_architecture)
:::
:::
:::
::::

## Moore's law: exponential growth

:::{style="margin-top:40px;"}
:::

:::: {.columns}
::: {.column width="60%"}
:::{style="font-size: 24px;"}
- Coined by Gordon Moore (co-founder of Intel) in 1965.
- Observation: The number of transistors on a microchip [doubles approximately every two years]{.alert}, though the pace has slowed a bit.
- This has driven decades of increasing computing power and decreasing costs.
- The law is not a physical law but an observation and prediction
- It has significant implications for the future of technology and computing! 
- Quantum computing may change this trajectory and increase the pace of growth.
- In the future, maybe only energy and time will limit computing power?
- [Read more about Moore's Law](https://en.wikipedia.org/wiki/Moore%27s_law)
:::
:::
::: {.column width="40%"}
![](figures/moores-law.jpg) 
:::
::::

## Von Neumann Architecture 

:::{style="margin-top:40px;"}
:::

:::: {.columns}
::: {.column width="50%"}
![](figures/neumann.webp)
:::

::: {.column width="50%"}
:::{style="font-size: 24px;"}
- The [Von Neumann Architecture](https://en.wikipedia.org/wiki/Von_Neumann_architecture) stores both program instructions and data together in a slow storage medium, such as a [hard disk](https://en.wikipedia.org/wiki/Hard_disk_drive), and transfers them to faster [RAM](https://en.wikipedia.org/wiki/Random-access_memory) for execution by the [CPU](https://en.wikipedia.org/wiki/Central_processing_unit)
- This is the basis for [almost all modern computers]{.alert}
- When proposed in 1945, this architecture was revolutionary, as [programs were previously seen as part of the machine](https://en.wikipedia.org/wiki/History_of_computing_hardware), distinct from the data they operated on
:::
:::
::::

## Von Neumann Architecture 

:::{style="margin-top:40px;"}
:::

:::: {.columns}
::: {.column width="50%"}
![](figures/von-neumann-architecture.webp)
:::

::: {.column width="50%"}
:::{style="font-size: 22px;"}
- Advantages:
  - Efficient memory use, with less need for separate areas
  - Flexibility in data storage and manipulation
  - Simplicity in design and operation

- Disadvantages:
  - [Von Neumann bottleneck](https://en.wikipedia.org/wiki/Von_Neumann_architecture#Von_Neumann_bottleneck): Limits computing performance due to sequential processing of instructions and data through a single bus
  - The CPU often waits for data due to its faster processing speed compared to memory transfer rates
  - [Harvard architecture](https://en.wikipedia.org/wiki/Harvard_architecture) is an alternative that separates data and instruction memory
:::
:::
::::

## Harvard Architecture

:::{style="margin-top:40px;"}
:::

:::{style="font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
- As a contrast to Von Neumann, the [Harvard Architecture](https://en.wikipedia.org/wiki/Harvard_architecture) uses physically separate storage and signal pathways for instructions and data.
- **Key Idea:** Can fetch the next instruction while the current instruction is operating on data.
- This allows for simultaneous access to both instructions and data, improving performance.
- Helps alleviate the Von Neumann bottleneck in certain contexts.
- Never achieved the same level of popularity as Von Neumann architecture for general-purpose computing.
- [Read more about Harvard Architecture](https://en.wikipedia.org/wiki/Harvard_architecture)
:::

:::{.column width="50%"}
![](figures/Harvard_architecture.svg.png)
:::
:::
:::


# Data representation {background-color="#2d4563"}

## Computers run on 0s and 1s

:::{style="margin-top:40px;"}
:::

:::: {.columns}
::: {.column width="50%"}
:::{style="font-size: 24px;"}
- Computers represent everything by using [0s and 1s]{.alert}
- Transistors act as [switches]{.alert}, with 1 for high voltage level and 0 for low voltage level
- Computers use binary because transistors are [easy to fabricate]{.alert} in silicon and can be densely packed on a chip

:::{.incremental}
- _But how does this work?_
- How can we represent text, images, and videos using only 0s and 1s?
- This leads us to [abstraction]{.alert}: representing ideas at different
  levels of detail by identifying what is essential
- We will use abstraction to translate anything into 0s and 1s, and also translate those numbers to other types
:::
:::
:::

::: {.column width="50%"}
![](figures/picasso.jpg)
:::
::::

## Number Systems Introduction

:::{style="margin-top:40px;"}
:::
:::{style="font-size: 24px;"}
- We are familiar with the **decimal** system (base 10), using digits 0-9.
- Computers use different number systems for internal representation.
- To understand how computers "think" in 0s and 1s, we'll explore:
    - An analogy using coins.
    - The **binary** system (base 2).
    - The **hexadecimal** system (base 16).
:::

## Converting coins to dollars

:::{style="margin-top:40px;"}
:::

:::: {.columns}
::: {.column width="50%"}
![](figures/coins.png)
:::

::: {.column width="50%"}
:::{style="font-size: 24px;"}
- We can convert between number systems by translating a value from one system to the other
- For example, the coins on the left represent the same value as $0.87
- Using pictures is clunky. Let's make a new representation system for coins
:::
:::
::::

## Converting coins to dollars

:::{style="margin-top:40px;"}
:::

:::: {.columns}
::: {.column width="50%"}
![](figures/coins.png)
:::

::: {.column width="50%"}
:::{style="font-size: 24px;"}
- To represent coins, we will make a number with four digits 
- The first represents quarters, the second dimes, the third nickels, and the fourth pennies
  - c3102 =
  - 3 x $0.25 + 1 x $0.10 + 0 x $0.05 + 2 x $0.01 =
  - $0.87

![](figures/qdnp.png){width=50%}
:::
:::
::::

## Converting dollars to coins

:::{style="margin-top:40px;"}
:::

:::: {.columns}
::: {.column width="50%"}
![](figures/coins.png)
:::

::: {.column width="50%"}
:::{.incremental}
- How do we convert money from dollars to coins? Assume we want to [minimise
  the number of coins used]{.alert}
- For example, what is $0.59 in coin representation? Use the same four-digit
  system: quarters, dimes, nickels, and pennies

- $0.59 = 2 x $0.25 + 0 x $0.10 + 1 x $0.05 + 4 x $0.01 = c2014
:::
:::
::::

## Quick questions!

:::{style="margin-top:40px;"}
:::

:::: {.columns}
::: {.column width="50%"}
- [Think-Pair-Share]{.alert}: do the following conversions

- What is c1112 in dollars?

- What is $0.61 in coin representation?  
:::

::: {.column width="50%"}
::: {.incremental}
Solutions:

- c1112 = $0.42 = 1 x $0.25 + 1 x $0.10 + 1 x $0.05 + 2 x $0.01

- $0.61 = c2101 = 2 x $0.25 + 1 x $0.10 + 0 x $0.05 + 1 x $0.01
:::
:::
::::

## Number systems – binary

:::{style="margin-top:40px;"}
:::

:::{.incremental}
:::{style="font-size: 24px;"}
- Now let us go back to computers! `r emo::ji('computer')`
- We can represent numbers using only 0s and 1s with the binary number system
- Instead of counting the number of 1s, 5s, 10s, and 25s coins you need, count
  the number of 1s, 2s, 4s, 8s, etc
- Why these numbers? They are [powers of 2]{.alert}. This is a number in [base
  2]{.alert}

- A [single binary digit is a bit]{.alert}, e.g., 101 has three bits
- An [8-bit group is called a byte]{.alert}, e.g., 10101010
- Binary numbers grow as follows:
  - 0 represents zero
  - 1 represents one
  - 10 represents two
  - 100 represents four
  - 1000 represents eight, and so on…
:::
:::

## Quick question!

:::{style="margin-top:40px;"}
:::

- [Think-Pair-Share]{.alert}: what is the binary representation of the decimal
  number 3?

:::{.fragment .fade-in fragment-index=1}
A) 101
:::

:::{.fragment .fade-in fragment-index=2}
:::{.fragment .highlight-red fragment-index=5}
B) 11
:::
:::

:::{.fragment .fade-in fragment-index=3}
C) 111
:::

:::{.fragment .fade-in fragment-index=4}
D) 010
:::

## Your turn!

[Practice Exercise 01]{.alert}: 

1. What binary number represents 5?

2. What binary number represents 7?

:::{.incremental}
Solutions:

- 5 = 101

- 7 = 111

- [Binary calculator](https://www.calculator.net/binary-calculator.html)
:::

## Convert binary to decimal

:::{style="margin-top:40px;"}
:::

To convert a binary number to decimal, just add each power of 2 that is
represented by a 1.

:::{style="font-size: 26px;"}
- For example, 00011000 = $2^4 + 2^3$ = 16 + 8 = 24

| $2^7$ (128) | $2^6$ (64) | $2^5$ (32) | $2^4$ (16) | $2^3$ (8) | $2^2$ (4) | $2^1$ (2) | $2^0$ (1) |
|-----|----|----|----|----|---|---|---|
|  0  | 0  | 0  | 1  | 1  | 0 | 0 | 0 |


<br>

- Another example: 10010001 = $2^7 + 2^4 + 2^0$ = 128 + 16 + 1 = 145

| 128 | 64 | 32 | 16 | 8 | 4 | 2 | 1 |
|-----|----|----|----|----|---|---|---|
|  1  | 0  | 0  | 1  | 0  | 0 | 0 | 1 |

:::

# So far, so good? `r emo::ji('smiley')` {background-color="#2d4563"}

# Binary and abstraction {background-color="#2d4563"}
## Binary and abstraction
### (Representing Images)

<br>

- Now that we can represent numbers using binary, [we can represent everything
  computers store using binary]{.alert}
- We just need to use [abstraction]{.alert} to interpret bits or numbers in particular ways
- Let us consider colours, images, and text

## Images as collections of colours

:::{style="margin-top:40px;"}
:::

:::: {.columns}
::: {.column width="60%"}
![](figures/mona-lisa.png)
:::

::: {.column width="40%"}
:::{style="font-size: 28px; margin-top: 40px;"}
:::{.incremental}
- What if we want to represent an image? How can we convert that to numbers?
- First, break the image down into a grid of colours, where each dot of color has a distinct hue 
- A dot of color in this context is called a [pixel](https://en.wikipedia.org/wiki/Pixel)
- Now we just need to represent a single color (a pixel) as a number!
:::
:::
:::
::::

## Images as collections of colours
### RGB colour model

:::{style="margin-top:40px;"}
:::

:::: {.columns}
::: {.column width="60%"}
![](figures/rgb.png)
:::

::: {.column width="40%"}
:::{style="font-size: 24px; margin-top: 40px;"}
:::{.incremental}
- The [RGB colour model](https://en.wikipedia.org/wiki/RGB_color_model) is
  widely used in digital displays
- Each pixel is represented by three numbers, each ranging from 0 to 255 (for 8-bit colour)
- The first number represents the amount of red, the second the amount of
  green, and the third the amount of blue
- (0,0,0) is black (no r/g/b) and (255,255,255) is white (full r/g/b)! 
- You can try different colours [here](https://www.w3schools.com/colors/colors_rgb.asp)
:::
:::
:::
::::

## Interactive RGB Exploration

:::{style="margin-top:40px;"}
:::

:::{style="font-size: 28px;"}
Let's explore the RGB model interactively!

- Visit an online RGB Colour Picker: [W3Schools RGB Calculator](https://www.w3schools.com/colors/colors_rgb.asp)
- Try inputting different values (0-255) for Red, Green, and Blue.
- Observe how the colour changes.
    - What happens if Red is 255 and Green/Blue are 0?
    - What if all three are equal (e.g., 128, 128, 128)?
    - Can you create your favourite colour? What are its RGB values?
:::

## Number systems – Hexadecimal
### What is hexadecimal?

:::{style="margin-top:20px;"}
:::

:::: {.columns}
::: {.column width="50%"}
![](figures/hexadecimal.png)
:::

::: {.column width="50%"}
:::{style="font-size: 22px; margin-top: 19px;"}
:::{.incremental}
- When we represent values with multiple bytes, it can be hard to distinguish where numbers begin and end
- [Hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal) is a number system with 16 digits: 0123456789**ABCDEF** (Base 16)
- It is used to represent binary numbers in a more compact way
- Each hex digit corresponds to 4 binary bits, making it a shorthand for binary:
  - 0000$_2$ = 0$_{16}$
  - 0001$_2$ = 1$_{16}$
  - 0010$_2$ = 2$_{16}$
  - ...
  - 1010$_2$ = A$_{16}$ (10 in decimal)
  - 1110$_2$ = E$_{16}$ (14 in decimal)
  - 1111$_2$ = F$_{16}$ (15 in decimal)
:::
:::
:::
::::

## Binary to hex conversion

:::{style="margin-top:40px; font-size: 23px;"}

- Convert binary to hex by grouping into blocks of four bits (starting from the right).
- Example: Binary `1001 1110 0000 1010` converts to Hex `9E0A`.
  - `1001`$_2$ = 9$_{16}$
  - `1110`$_2$ = E$_{16}$
  - `0000`$_2$ = 0$_{16}$
  - `1010`$_2$ = A$_{16}$

<br>

[Practice Exercise 02]{.alert}:

1. Convert the decimal number 13 to binary.

2. Convert that binary number to hexadecimal. 

:::{.incremental}
- Solutions:
  - Decimal 13 to binary: 1101$_2$
  - Binary 1101$_2$ to hexadecimal: D$_{16}$
:::
:::

## Hexadecimal and HTML
### Hex and RGB

:::{style="margin-top:40px;" .incremental}
- HTML and CSS use hexadecimal to represent colours.
- Six-digit hex numbers specify colours: `#RRGGBB`
  - `#FFFFFF` = White (Red=FF, Green=FF, Blue=FF)
  - `#000000` = Black (Red=00, Green=00, Blue=00)
  - `#FF0000` = Red (Red=FF, Green=00, Blue=00)

- Each pair of hex digits represents a colour component (00 to FF, which is 0 to 255 in decimal).

- Each color channel (8-bit) has 256 intensity levels.
- Total possible colours: $256 \times 256 \times 256 = 256^3 \approx 16.7$ million colours.
:::

## Hexadecimal in HTML/CSS Colours
### Examples and Interpretation

:::{style="margin-top:30px; font-size: 20px;"}
:::{.columns}
:::{.column width="50%"}
- **Pure Colours:**
  - `#FF0000`: Full Red (Red=FF, Green=00, Blue=00)
  - `#00FF00`: Full Green (Red=00, Green=FF, Blue=00)
  - `#0000FF`: Full Blue (Red=00, Green=00, Blue=00)

- **Black and White:**
  - `#000000`: Black (Red=00, Green=00, Blue=00 – no light)
  - `#FFFFFF`: White (Red=FF, Green=FF, Blue=FF – all light at full intensity)

- **Mixing Colours (Secondary Colours):**
  - `#FFFF00`: Yellow (Red=FF, Green=FF, Blue=00)
  - `#00FFFF`: Cyan (Red=00, Green=FF, Blue=FF)
  - `#FF00FF`: Magenta (Red=FF, Green=00, Blue=FF)
:::

:::{.column width="50%"}
![](figures/wheel.jpg)
:::
:::
:::

## Hexadecimal in HTML/CSS Colours
### Shorthand and Transparency (Alpha)

:::{style="margin-top:30px; font-size: 18px;"}
:::{.columns}
:::{.column width="50%"}
- **3-Digit Shorthand (`#RGB`):**
  - If each pair of hex digits in a 6-digit code is the same, you can use a 3-digit shorthand
  - The browser expands it by duplicating each digit!
  - Examples:
    - `#F00` is equivalent to `#FF0000` (Red)
    - `#0A3` is equivalent to `#00AA33` (a dark green)
    - `#FFF` is equivalent to `#FFFFFF` (White)

- Opacity is represented by an additional two hex digits (8-digit hex)
  - `00` is fully transparent (invisible)
  - `FF` is fully opaque (solid)
  - Values in between give partial transparency (e.g., `80` is 50% opaque)
  - **4-Digit Shorthand (`#RGBA`):** Similar to the 3-digit shorthand, but for colours with an alpha channel.
  - Example: `#F008` would be equivalent to `#FF000088` (semi-transparent red, with alpha 88 hex).
:::

:::{.column width="50%"}
![](figures/css-rgba.png)
:::
:::
:::

# Conclusion {background-color="#2d4563"}

## Brief Recap

:::{style="margin-top:40px;"}
:::

:::{style="font-size: 21px;"}
:::{.columns}
:::{.column width="50%"}
In this lecture, we covered:

- **Evolution of Computing**: From human calculators and mechanical devices to silicon-based computers and the Von Neumann architecture.
- **Data Representation Fundamentals**: How computers use binary (0s and 1s) as the basic language.
- **Abstraction**: The key concept of representing complex information (like numbers and images) at different levels.
- **Number Systems**:
    - **Binary (Base 2)**: Bits, bytes, and converting between binary and decimal.
    - **Hexadecimal (Base 16)**: A compact way to represent binary, its conversion, and its use in RGB colours for HTML/CSS.
- **Representing Images**: Pixels and the RGB colour model.
:::

:::{.column width="50%"}
![](figures/binary-meme.jpg)
:::
:::
:::

# Questions? `r emo::ji('thinking_face')` {background-color="#2d4563"}

# Thank you very much and see you next class! `r emo::ji('smiling_face_with_smiling_eyes')` `r emo::ji('folded_hands')` {background-color="#2d4563"}

# Solutions to Practice Exercises {background-color="#2d4563"}

## Solution - Practice Exercise 01 {#sec-solution01}

:::{style="font-size: 24px; margin-top: 40px;"}

1. What binary number represents 5?

  - In binary, the number 5 is represented as 101$_2$.
  - $ (1 \times 2^2) + (0 \times 2^1) + (1 \times 2^0) = 4 + 0 + 1 = 5 $.

2. What binary number represents 7?

  -  In binary, the number 7 is represented as 111$_2$.
  - $ (1 \times 2^2) + (1 \times 2^1) + (1 \times 2^0) = 4 + 2 + 1 = 7 $.

:::

## Solution - Practice Exercise 02 {#sec-solution02}

:::{style="font-size: 22px; margin-top: 40px;"}

- Decimal 13 to binary:

  - $13 = 8 + 4 + 0 + 1$
  - $13 = (1 \times 2^3) + (1 \times 2^2) + (0 \times 2^1) + (1 \times 2^0)$
  - So, decimal 13 is `1101` in binary (1101$_2$).

- Binary `1101` to hexadecimal:

  - Group the binary into blocks of four (from the right): `1101`.
  - Convert the block `1101` to its hexadecimal equivalent:
    - `1101`$_2$ = $(1 \times 8) + (1 \times 4) + (0 \times 2) + (1 \times 1) = 8 + 4 + 0 + 1 = 13$ in decimal.
    - Decimal 13 is `D` in hexadecimal.
  - So, binary `1101` is `D` in hexadecimal (D$_{16}$).
:::
